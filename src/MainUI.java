
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.apache.commons.lang.StringUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Prateek_Pooja
 */

class ComboBoxTableCellRenderer extends JComboBox implements TableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setSelectedItem(value);
        return this;
    }

}




public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     * 
     * 
     */
   HashMap<String,String>ActionLabelMapping=new HashMap<String,String>();
   DefaultTableModel model1,model2;
   String[] allScenarios;
   int totalScenarioLength;
   
    
    public MainUI() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        jLabel3.setLocation((this.getWidth()-jLabel3.getWidth())/2,50);
        
        Font font = jLabel3.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        jLabel3.setFont(font.deriveFont(attributes));
        
        save.setEnabled(false);
        ProceedToScenario.setEnabled(false);
        checkFormat.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        HomePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        actionDetails = new javax.swing.JTextArea();
        save = new javax.swing.JButton();
        checkFormat = new javax.swing.JButton();
        ProceedToScenario = new javax.swing.JButton();
        Step1Panel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        eventLabelTable = new javax.swing.JTable();
        proceed = new javax.swing.JButton();
        Step2Panel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        msgPreconditionTable = new javax.swing.JTable();
        generateScenario = new javax.swing.JButton();
        Step3Panel = new javax.swing.JPanel();
        scenarioTextScrollPane2 = new javax.swing.JScrollPane();
        scenarioTextBox = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Software");

        jLabel1.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Use Case Name");

        jLabel2.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Actor");

        jLabel4.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Precondition");

        jLabel5.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("Action Details");

        actionDetails.setColumns(20);
        actionDetails.setRows(5);
        actionDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                actionDetailsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(actionDetails);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        checkFormat.setText("Check Format");
        checkFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFormatActionPerformed(evt);
            }
        });

        ProceedToScenario.setText("Proceed >>");
        ProceedToScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProceedToScenarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HomePanelLayout = new javax.swing.GroupLayout(HomePanel);
        HomePanel.setLayout(HomePanelLayout);
        HomePanelLayout.setHorizontalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(save, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkFormat, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ProceedToScenario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(27, 27, 27)
                        .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HomePanelLayout.setVerticalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(save)
                        .addGap(28, 28, 28)
                        .addComponent(checkFormat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ProceedToScenario)))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Home", HomePanel);

        Step1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Event Labels", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N
        Step1Panel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        eventLabelTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        eventLabelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        eventLabelTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane5.setViewportView(eventLabelTable);

        proceed.setText("Proceed>>");
        proceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Step1PanelLayout = new javax.swing.GroupLayout(Step1Panel);
        Step1Panel.setLayout(Step1PanelLayout);
        Step1PanelLayout.setHorizontalGroup(
            Step1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Step1PanelLayout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(proceed)
                .addGap(309, 309, 309))
        );
        Step1PanelLayout.setVerticalGroup(
            Step1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Step1PanelLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(Step1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proceed)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(283, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Step 1", Step1Panel);

        Step2Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Message Precondition Table", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        msgPreconditionTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        msgPreconditionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        msgPreconditionTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane6.setViewportView(msgPreconditionTable);

        generateScenario.setText("Generate Scenario");
        generateScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateScenarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Step2PanelLayout = new javax.swing.GroupLayout(Step2Panel);
        Step2Panel.setLayout(Step2PanelLayout);
        Step2PanelLayout.setHorizontalGroup(
            Step2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Step2PanelLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(Step2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateScenario)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE))
                .addGap(428, 428, 428))
        );
        Step2PanelLayout.setVerticalGroup(
            Step2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Step2PanelLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addGap(75, 75, 75)
                .addComponent(generateScenario)
                .addGap(142, 142, 142))
        );

        jTabbedPane2.addTab("Step 2", Step2Panel);

        scenarioTextBox.setColumns(20);
        scenarioTextBox.setRows(5);
        scenarioTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                scenarioTextBoxKeyReleased(evt);
            }
        });
        scenarioTextScrollPane2.setViewportView(scenarioTextBox);

        javax.swing.GroupLayout Step3PanelLayout = new javax.swing.GroupLayout(Step3Panel);
        Step3Panel.setLayout(Step3PanelLayout);
        Step3PanelLayout.setHorizontalGroup(
            Step3PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Step3PanelLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(scenarioTextScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(598, Short.MAX_VALUE))
        );
        Step3PanelLayout.setVerticalGroup(
            Step3PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Step3PanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(scenarioTextScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(223, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Step 3", Step3Panel);

        jLabel3.setFont(new java.awt.Font("Sitka Text", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("Software Failure Modes & Effect Analysis For Use-Cases");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionDetailsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_actionDetailsKeyReleased
        // TODO add your handling code here:
        
        if(actionDetails.getText().length()==0){ save.setEnabled(false); checkFormat.setEnabled(false); proceed.setEnabled(false);}
        else {
            save.setEnabled(true);
            checkFormat.setEnabled(true);
           // proceed.setEnabled(true);
             }
    }//GEN-LAST:event_actionDetailsKeyReleased

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        ProceedToScenario.setEnabled(true);
    }//GEN-LAST:event_saveActionPerformed

    
    
    
    
     public void Addcombo(JTable table,Map<Integer,List<String>> fileNames){
        
        TableColumnModel colModel = table.getColumnModel();
           
       for(int i=3;i<table.getColumnCount();i++){
            TableColumn col = colModel.getColumn(i);
            //DefaultComboBoxModel comboModel = new DefaultComboBoxModel();
           
             JComboBox comboBox = new JComboBox();
             for(String item : fileNames.get(i))
             //comboModel.addElement(item);
             comboBox.addItem(item);
                 //comboBox.setModel(comboModel);
             comboBox.setSelectedIndex(0);
             //comboBox.setEditable(true);
            comboBox.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentShown(ComponentEvent e) {
                final JComponent c = (JComponent) e.getSource();
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        c.requestFocus();
                        System.out.println(c);
                        if (c instanceof JComboBox) {
                            System.out.println("a");
                        }
                    }
                });
            }
        });

          
            // for(int j=0;j<table.getRowCount();j++){
            //   TableCellRenderer renderer2 = table.getCellRenderer(j, i);
            //comboBox.setSelectedItem(fileNames.get(i).get(0));
              comboBox.setSelectedIndex(0);
             // comboModel.setSelectedItem(fileNames.get(i).get(0));
             col.setCellEditor(new DefaultCellEditor(comboBox));
             ComboBoxTableCellRenderer renderer
                    = new ComboBoxTableCellRenderer();
               // renderer.setModel(comboModel);
            col.setCellRenderer(renderer);
            //comboBox.setSelectedIndex(0);

//}
            }
        }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    private void checkFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFormatActionPerformed
        // TODO add your handling code here:
        String s[] = actionDetails.getText().split("\\r?\\n");
        ArrayList<String> arrList = new ArrayList<>(Arrays.asList(s)) ;
       // System.out.println(arrList);
        Iterator itr=arrList.iterator();//getting Iterator from arraylist to traverse elements  
        int status=0;
        int if_stack=0;
        int while_stack=0;
        int endwhilefirst=0;
        int endiffirst=0;
        while(itr.hasNext())  
           {
                status=0;
                String res[]=itr.next().toString().split(" ");
                if(res[0].equalsIgnoreCase("if"))
                {
                    if_stack++;
                    if(while_stack!=0) //means if inside while--> hence if should end first
                    endiffirst++; 
                    for(int i=1;i<res.length;i++)
                    if(res[i].equalsIgnoreCase("then"))
                    status=1;
                    if(status==0) //means "then" clause not found in the line
                {
            //System.out.println("Incorrect Format! No then");
                    JOptionPane.showMessageDialog(null, "Incorrect Format! IF without THEN"); 
                    System.exit(0);
                }
            }
      else if(res[0].equalsIgnoreCase("endif"))
      {
        if(endwhilefirst>0 && endwhilefirst>endiffirst) //if endwhilefirst is 1 also need to check whether endiffirst is not 1-->ambiguity
        { 
            JOptionPane.showMessageDialog(null, "Incorrect Format! while should end first.");
            System.exit(0);
        }
        //System.out.println("Incorrect Format! while should end first.");
        else
        {
            if(endiffirst>0)
               endiffirst--; 
          if_stack--;
        }
      }
        else if(res[0].equalsIgnoreCase("while"))
      {
          while_stack++;
          if(if_stack!=0)
              endwhilefirst++;
       }
      
      else if(res[0].equalsIgnoreCase("endwhile"))
      {
          if(endiffirst>0 && endwhilefirst<=endiffirst)
          {
              JOptionPane.showMessageDialog(null, "Incorrect Format! if should end first.");
              System.exit(0);
          }
            //System.out.println("Incorrect Format! if should end first");
          else
          {
              if(endwhilefirst>0)
                  endwhilefirst--;
            while_stack--;
          }
      }
       }
     if(if_stack==0 && while_stack==0 && endiffirst==0 && endwhilefirst==0)
        JOptionPane.showMessageDialog(null, "Correct Format!");         
//System.out.println("Correct Format!");
     else
     {
         JOptionPane.showMessageDialog(null, "InCorrect Format!");
         System.exit(0);
     }
    }//GEN-LAST:event_checkFormatActionPerformed

    public void resizeTable(JTable table){
        
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        final TableColumnModel colModel = table.getColumnModel();
        
        for(int i=0;i<table.getColumnCount();i++){
            
            TableColumn col = colModel.getColumn(i);
            int width1 = 0;   //column header width
            int width2 = 50;  // content width
            
            TableCellRenderer renderer1 = col.getHeaderRenderer();
            if(renderer1==null){
                renderer1 = table.getTableHeader().getDefaultRenderer();
            }
            
            Component comp1 = renderer1.getTableCellRendererComponent(table, col.getHeaderValue(), false, false, 0, 0);
            width1 = comp1.getPreferredSize().width;
            
            for(int j=0;j<table.getRowCount();j++){
                
                TableCellRenderer renderer2 = table.getCellRenderer(j, i);
                Component comp2 = table.prepareRenderer(renderer2, j, i);
                width2 = Math.max(comp2.getPreferredSize().width+1, width2);
                
            }
            int wid = Math.max(width1, width2);
            colModel.getColumn(i).setPreferredWidth(wid+2);
            }
        }
    
    private void proceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedActionPerformed
         //String s[] = actionDetails.getText().split("\\r?\\n");
        jTabbedPane2.setEnabledAt(2, true);
        jTabbedPane2.setSelectedIndex(2);
         int msgNo=1;
         String msgSeqNo="";
         Stack ifStack = new Stack();
         Stack whileStack=new Stack();
         boolean elseFlag = false;
         int elseflagCount=0;
         boolean firstEndif = false;
         boolean betweenIfAndElse = false;
       
         String precondition = "";
         String currentPrecondition = "";
         String previousPrecondition = "";
         String previousMsg="";
         String stackCondition="";
         //ArrayList<String,<> fileNames=new ArrayList<String>();
         
          model2=new DefaultTableModel();
        msgPreconditionTable.setModel(model2);
        msgPreconditionTable.setRowHeight(35);
        msgPreconditionTable.setShowGrid(true);
        msgPreconditionTable.setGridColor(Color.LIGHT_GRAY);
        model2.addColumn("Action No");
        model2.addColumn("Action Label");
        model2.addColumn("Action Label Precondition");
        msgPreconditionTable.getTableHeader().setFont(new Font("SansSerif",Font.BOLD,15));
         Map<Integer, List<String>> fileNames = new HashMap<Integer, List<String>>();
         String[] msgLines = actionDetails.getText().split("\\r?\\n");
         File folder=new File("C:\\Users\\sony\\Documents\\useCaseFile");
            int fileCount=3;     //As 3 column are by default generated.Action no, name and precodniton.      
         
         for(File fileEntry : folder.listFiles())
         {if(fileEntry.isFile())
             { 
              System.out.println("---file name is-- "+fileEntry.getName().toString());
                 model2.addColumn(fileEntry.getName().toString()); 
                 try (BufferedReader br = new BufferedReader(new FileReader(fileEntry))) {
                      List<String> fileStates = new ArrayList<String>();
                      String sCurrentLine;
                      while ((sCurrentLine = br.readLine()) != null) {
                          System.out.println(sCurrentLine);
			fileStates.add(sCurrentLine);
                    }
                      fileNames.put(fileCount, fileStates);
                      
		} catch (IOException e) {
			e.printStackTrace();
		}  fileCount++; }
         }
         
        //System.out.println(arrList);
        // System.out.println("----hashmap entries size= "+ActionLabelMapping.size());
         String ActionNo="";
         for(int i=0;i<msgLines.length;i++){    
             msgLines[i]=msgLines[i].trim();           
              Iterator it = ActionLabelMapping.entrySet().iterator();
                     while (it.hasNext()) {
                          Map.Entry pair = (Map.Entry)it.next();
                          if(pair.getValue().equals(msgLines[i]))
                              ActionNo=pair.getKey().toString();
                         // System.out.println(pair.getKey() + " = " + pair.getValue());
                            
                               }
             //   System.out.println("---------");
             if(msgLines[i].startsWith("IF")){          //Case 1 
                 betweenIfAndElse = true;
                // String[] ifLine = msgLines[i].split(" ");
                 //String cond = ifLine[1];
              if(!currentPrecondition.contains("+")){       //if not even a single endif has been encountered once
                      stackCondition=currentPrecondition + ActionNo +"(F)"+", ";
                      currentPrecondition = currentPrecondition + ActionNo +"(T)"+", ";
                      ifStack.push(stackCondition);
             }  
                 else{
                     String[] currentPreconditionSplit = currentPrecondition.split("\\+");
                     String[] temp = currentPreconditionSplit;
                     for(int j=0;j<currentPreconditionSplit.length;j++){ 
                         currentPreconditionSplit[j] = currentPreconditionSplit[j]+ ActionNo +"(T)"+", ";
                         temp[j] = temp[j]+ ActionNo +"(F)"+", ";
                     }
                     
                     currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                     stackCondition = StringUtils.join(temp,"+");
                     ifStack.push(stackCondition);                     
                 }
                      model2.addRow(new Object[]{
                                        ActionNo,
                                        msgLines[i],
                                        precondition,
                                        });  
         }
             else if(msgLines[i].startsWith("WHILE")){          //Case 2 
              if(!currentPrecondition.contains("+")){       //if not even a single endif has been encountered once
                      stackCondition=currentPrecondition + ActionNo +"(F)"+", ";
                      currentPrecondition = currentPrecondition + ActionNo +"(T)"+", ";
                      whileStack.push(stackCondition);
             }  
                 else{
                     String[] currentPreconditionSplit = currentPrecondition.split("\\+");
                     String[] temp = currentPreconditionSplit;
                     for(int j=0;j<currentPreconditionSplit.length;j++){ 
                         currentPreconditionSplit[j] = currentPreconditionSplit[j]+ ActionNo +"(T)"+", ";
                         temp[j] = temp[j]+ ActionNo +"(F)"+", ";
                     }
                     currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                     stackCondition = StringUtils.join(temp,"+");
                     whileStack.push(stackCondition);                     
                 }
                      model2.addRow(new Object[]{
                                        ActionNo,
                                        msgLines[i],
                                        precondition,
                                        });  
         }
             
              else if(msgLines[i].startsWith("ELSE")){            //Case 3
                 betweenIfAndElse = false;
                 elseFlag = true;
                 elseflagCount++;
                 previousPrecondition = ifStack.pop().toString();
                 if(!currentPrecondition.contains("+")){
                     
                     ifStack.push(currentPrecondition);
                     currentPrecondition=previousPrecondition;
                 }
                 else{
                    String[] currentPreconditionSplit =currentPrecondition.split("\\+");                    
                    currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                    ifStack.push(currentPrecondition);
                     //ifStack.push(previousPrecondition);
                     currentPrecondition=previousPrecondition;
                 }                
             }
              else if(msgLines[i].startsWith("ENDIF")){            //CASE 4
                 previousPrecondition = ifStack.pop().toString(); 
                 if(!currentPrecondition.contains("+")){
                              if(elseFlag) {
                                 currentPrecondition = previousPrecondition+"+"+currentPrecondition; 
                            }
                             else{
                                 currentPrecondition = previousPrecondition;
                             }        
                     if(msgLines[i+1].startsWith("ELSE"))
                     {
                          String temp1=ifStack.pop().toString();
                          ifStack.push(currentPrecondition);
                          ifStack.push(temp1);
                     }
                     else if(msgLines[i+1].startsWith("ENDIF"))
                     { 
                     }
                      else {
                     } 
                     elseflagCount--;              
                       elseFlag = false;
                     firstEndif = true;                   
                 }
                 else{
                         if(elseFlag){
                          currentPrecondition = previousPrecondition+"+"+currentPrecondition; 
                           }
                     else{
                          currentPrecondition = previousPrecondition+"+"+currentPrecondition;
                        }         
                        elseflagCount--;
                     
                  elseFlag = false;
                      ifStack.push(currentPrecondition);
                 }              
             }
              else if(msgLines[i].startsWith("ENDWHILE")){            //CASE 5
                 previousPrecondition = whileStack.pop().toString(); 
                 System.out.println("--Current Precondition------"+currentPrecondition);
                 System.out.println("---while stack condition------"+previousPrecondition);
                 System.out.println("-----------------********-----");
                 currentPrecondition=currentPrecondition+previousPrecondition.substring(previousPrecondition.lastIndexOf('A'),previousPrecondition.lastIndexOf(','))+", ";
                 if(!currentPrecondition.contains("+")){
                          currentPrecondition = currentPrecondition+"+"+previousPrecondition;
                    
                      }
                 else{
                         String currentPreconditionSplit[] = currentPrecondition.split("\\+");
                     for(int j=0;j<currentPreconditionSplit.length;j++){
                         currentPreconditionSplit[j] = currentPreconditionSplit[j]+"+"+previousPrecondition;
                       
                   }
                     currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                 }
                      whileStack.push(currentPrecondition);
                 } 
              
             else if(msgLines[i].startsWith("EXIT")){                //CASE 6
                 if(!currentPrecondition.contains("+")){                     
                     currentPrecondition = currentPrecondition + "$";                    
                 }
                 else{
                     String currentPreconditionSplit[] = currentPrecondition.split("\\+");
                     
                     for(int j=0;j<currentPreconditionSplit.length;j++){
                         
                         currentPreconditionSplit[j] = currentPreconditionSplit[j]+"$";
                         
                     }
                     currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");                    
                 }
              }
              else{                          //CASE 7
                  precondition = currentPrecondition;
                  System.out.println("Precondition:  "+precondition);
                  
                  if(!betweenIfAndElse){
                    if(!currentPrecondition.contains("+")){                     
                        currentPrecondition = currentPrecondition+ActionNo+", ";
                                model2.addRow(new Object[]{
                                        ActionNo,
                                        msgLines[i],
                                        precondition,
                                        });  
                    }                    
                    else{ 
                        
                        String currentPreconditionSplit[] = currentPrecondition.split("\\+");
                        for(int j=0;j<currentPreconditionSplit.length;j++){
                            currentPreconditionSplit[j] = currentPreconditionSplit[j] + ActionNo+", ";                            
                        }
                        currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");  
                        
                              model2.addRow(new Object[]{
                                        ActionNo,
                                        msgLines[i],
                                        precondition,
                                        });
                    }
                 }
                 else{
                        if(!currentPrecondition.contains("+")){
                            currentPrecondition=currentPrecondition+ActionNo+", ";
                        }                         
                        else{                
                            String[] ppSplit=currentPrecondition.split("\\+");
                            for(int k=0;k<ppSplit.length;k++)
                            {  ppSplit[k]=ppSplit[k]+ActionNo+", ";                             }
                          currentPrecondition=StringUtils.join(ppSplit,"+"); 
                        }
                         model2.addRow(new Object[]{
                                        ActionNo,
                                        msgLines[i],
                                        precondition,
                                        });    
                        
                 }
             }
                allScenarios=currentPrecondition.split("\\+");
                totalScenarioLength=allScenarios.length;  
             System.out.println();    
             System.out.println("********************************************************************");
             System.out.println();
         }
         Addcombo(msgPreconditionTable,fileNames);      
        resizeTable(msgPreconditionTable);
        
         
    }//GEN-LAST:event_proceedActionPerformed

    private void ProceedToScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProceedToScenarioActionPerformed
        jTabbedPane2.setEnabledAt(1, true);
        jTabbedPane2.setSelectedIndex(1);
        
        model1 = new DefaultTableModel();
        //  System.out.println("model++++"+model1+"o");
        eventLabelTable.setModel(model1);
        eventLabelTable.setRowHeight(35);
        eventLabelTable.setShowGrid(true);
        eventLabelTable.setGridColor(Color.LIGHT_GRAY);
        model1.addColumn("Action No");
        model1.addColumn("Action Label");
        eventLabelTable.getTableHeader().setFont(new Font("SansSerif",Font.BOLD,15));
        String[] msgLines = actionDetails.getText().split("\\r?\\n");     
        int eventNumber=0;
        String eventNo="A"+eventNumber;
        for(int i=0;i<msgLines.length;i++){    
        msgLines[i]=msgLines[i].trim();
        if((!msgLines[i].contains("ELSE")) && (!msgLines[i].contains("ENDIF")) && (!msgLines[i].contains("ENDWHILE")))
            {
                
            
                eventNumber++;
                eventNo="A"+String.valueOf(eventNumber);
                
                model1.addRow(new Object[]{
                                        eventNo,
                                        msgLines[i],                                        
                                        });      
                ActionLabelMapping.put(eventNo,msgLines[i]);
             }
        else
        {
                model1.addRow(new Object[]{
                                        "-",
                                            msgLines[i],                                        
                                        });
            
        }
            }  
      //  resizeTable(eventLabelTable);
    }//GEN-LAST:event_ProceedToScenarioActionPerformed

    private void generateScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateScenarioActionPerformed
        // TODO add your handling code here:
        jTabbedPane2.setEnabledAt(3, true);
        jTabbedPane2.setSelectedIndex(3);
        String ScenariosAll="";
        String conditionStatus="";
        for(int i=0;i<allScenarios.length;i++)
        {
           ScenariosAll+="SCENARIO "+String.valueOf(i+1)+" : ";
            String[] splitmsg=allScenarios[i].split(",");
            for(int j=0;j<splitmsg.length-1;j++)
            {
                System.out.print("---Action Label-----"+splitmsg[j]);
                if(splitmsg[j].contains("(")){
                conditionStatus=splitmsg[j].substring(splitmsg[j].indexOf("("),splitmsg[j].lastIndexOf(")"));
                splitmsg[j]=splitmsg[j].substring(0, splitmsg[j].indexOf("("));
                ScenariosAll=ScenariosAll+"\n"+ActionLabelMapping.get(splitmsg[j].toString().trim())+" "+conditionStatus+")";
                }
                else
                {
                    ScenariosAll=ScenariosAll+"\n"+ActionLabelMapping.get(splitmsg[j].toString().trim());
                }
            }
            ScenariosAll=ScenariosAll+"\n"+"\n";
            System.out.println("All Scenarion: "+ScenariosAll);
        }
        scenarioTextBox.setText(ScenariosAll);
    }//GEN-LAST:event_generateScenarioActionPerformed

    private void scenarioTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scenarioTextBoxKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_scenarioTextBoxKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//        jLabel1.setHorizontalAlignment(JLabel.CENTER);
//        jLabel2.setVerticalAlignment(JLabel.CENTER);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HomePanel;
    private javax.swing.JButton ProceedToScenario;
    private javax.swing.JPanel Step1Panel;
    private javax.swing.JPanel Step2Panel;
    private javax.swing.JPanel Step3Panel;
    private javax.swing.JTextArea actionDetails;
    private javax.swing.JButton checkFormat;
    private javax.swing.JTable eventLabelTable;
    private javax.swing.JButton generateScenario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTable msgPreconditionTable;
    private javax.swing.JButton proceed;
    private javax.swing.JButton save;
    private javax.swing.JTextArea scenarioTextBox;
    private javax.swing.JScrollPane scenarioTextScrollPane2;
    // End of variables declaration//GEN-END:variables
}
